package simpledb;

import java.util.NoSuchElementException;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

  private static final long serialVersionUID = 1L;

  /**
   * @see Join@constructor
   */
  private final JoinPredicate p;
  /**
   * An iterator used for scanning the left table to be joined
   */
  private DbIterator child1;
  /**
   * An iterator used for scanning the right table to be joined
   */
  private DbIterator child2;
  /**
   * The TupleDesc of the joined table
   */
  private TupleDesc joinedTd;
  /**
   * The tuple corresponding to the current child1
   */
  private Tuple curChild1;

  /**
   * Constructor. Accepts to children to join and the predicate to join them on
   *
   * @param p      The predicate to use to join the children
   * @param child1 Iterator for the left(outer) relation to join
   * @param child2 Iterator for the right(inner) relation to join
   */
  public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
    this.p = p;
    this.child1 = child1;
    this.child2 = child2;
    this.joinedTd = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    this.curChild1 = null;
  }

  public JoinPredicate getJoinPredicate() {
    return p;
  }

  /**
   * @return the field name of join field1. Should be quantified by alias or table name.
   */
  public String getJoinField1Name() {
    return child1.getTupleDesc().getFieldName(p.getField1());
  }

  /**
   * @return the field name of join field2. Should be quantified by alias or table name.
   */
  public String getJoinField2Name() {
    return child2.getTupleDesc().getFieldName(p.getField2());
  }

  /**
   * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible implementation logic.
   */
  public TupleDesc getTupleDesc() {
    return joinedTd;
  }

  public void open() throws DbException, NoSuchElementException, TransactionAbortedException {
    super.open();
    child1.open();
    child2.open();
  }

  public void close() {
    super.close();
    child1.close();
    child2.close();
  }

  public void rewind() throws DbException, TransactionAbortedException {
    child1.rewind();
    child2.rewind();
  }

  /**
   * Returns the next tuple generated by the join, or null if there are no more tuples. Logically,
   * this is the next tuple in r1 cross r2 that satisfies the join predicate. There are many
   * possible implementations; the simplest is a nested loops join.
   * <p>
   * Note that the tuples returned from this particular implementation of Join are simply the
   * concatenation of joining tuples from the left and right relation. Therefore, if an equality
   * predicate is used there will be two copies of the join attribute in the results. (Removing such
   * duplicate columns can be done with an additional projection operator if needed.)
   * <p>
   * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6}, joined on equality of the
   * first column, then this returns {1,2,3,1,5,6}.
   *
   * @return The next matching tuple.
   * @see JoinPredicate#filter
   */
  protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    // Step 1. Initialize if `curChild1` is null.
    if (curChild1 == null) {
      if (!child1.hasNext()) {
        // Return null if child1 doesn't have any tuple at all.
        return null;
      } else {
        // Otherwise set `curChild1` to the first tuple of child1.
        curChild1 = child1.next();
      }
    }
    // Step 2. Start iterating.
    while (true) {
      // Iterate over child2. If we find a pair of expected tuples, return the joined tuple.
      while (child2.hasNext()) {
        Tuple curChild2 = child2.next();
        if (p.filter(curChild1, curChild2)) {
          // Join `curChild1` and `curChild2`.
          Tuple joinedTuple = new Tuple(joinedTd);
          int nChild1 = child1.getTupleDesc().numFields();
          int nChild2 = child2.getTupleDesc().numFields();
          for (int i = 0; i < nChild1; ++i) {
            joinedTuple.setField(i, curChild1.getField(i));
          }
          for (int i = 0; i < nChild2; ++i) {
            joinedTuple.setField(nChild1 + i, curChild2.getField(i));
          }
          return joinedTuple;
        }
      }
      // When child2 runs to its end, we check whether child1 has a next tuple. If so, we let child1
      // go one step further and rewind child2. Otherwise we return null.
      if (child1.hasNext()) {
        curChild1 = child1.next();
        child2.rewind();
      } else {
        return null;
      }
    }
  }

  @Override
  public DbIterator[] getChildren() {
    return new DbIterator[]{child1, child2};
  }

  @Override
  public void setChildren(DbIterator[] children) {
    assert children.length == 2;
    child1 = children[0];
    child2 = children[1];
    joinedTd = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    curChild1 = null;
  }

}
